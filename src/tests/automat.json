{
    "_id": "a3cfb0c18f630ce73ccf86b1db5117db",
    "_meta": {
        "etag": "I",
        "github_username": "YaphetKG",
        "timestamp": "2021-01-08T20:30:44.326143",
        "uptime_status": "good",
        "uptime_ts": "2021-01-12T00:28:29.401108",
        "url": "https://automat.renci.org/panther/openapi.json"
    },
    "_score": 1,
    "info": {
        "contact": {
            "email": "kebedey@renci.org",
            "name": "Yaphet Kebede",
            "x-id": "https://github.com/yaphetkg",
            "x-role": "contributor"
        },
        "description": " A graph of gene families and pathways from [Panther (pantherdb.org)](pantherdb.org)",
        "termsOfService": "http://linkmissing",
        "title": "Automat Panther",
        "version": "1.0.0",
        "x-translator": {
            "component": "KP",
            "teams": [
                "Ranker"
            ]
        }
    },
    "openapi": "3.0.2",
    "paths": [
        {
            "path": "/query",
            "pathitem": {
                "post": {
                    "description": "Given a question graph return question graph plus answers.",
                    "summary": "Query Reasoner API"
                }
            }
        },
        {
            "path": "/reasonerapi",
            "pathitem": {
                "get": {
                    "description": "Returns a list of question templates that can be used to query this plater instance.",
                    "summary": "Get question templates"
                },
                "post": {
                    "description": "Handle TRAPI request.",
                    "summary": "Reasoner Api"
                }
            }
        },
        {
            "path": "/cypher",
            "pathitem": {
                "post": {
                    "description": "Runs cypher query against the Neo4j instance, and returns an equivalent response expected from a Neo4j HTTP endpoint (https://neo4j.com/docs/rest-docs/current/).",
                    "summary": "Run cypher query"
                }
            }
        },
        {
            "path": "/predicates",
            "pathitem": {
                "get": {
                    "description": "Returns an object where outer keys represent source types with second level keys as targets. And the values of the second level keys is the type of possible edge typesthat connect these concepts.",
                    "summary": "Get one-hop connection types"
                }
            }
        },
        {
            "path": "/graph/schema",
            "pathitem": {
                "get": {
                    "description": "Get one-hop connection types",
                    "summary": "Get one-hop connection types"
                }
            }
        },
        {
            "path": "/simple_spec",
            "pathitem": {
                "get": {
                    "description": "Returns a list of available predicates when choosing a single source or target curie. Calling this endpoint with no query parameters will return all possible hops for all types.",
                    "summary": "Get one-hop connection schema"
                }
            }
        },
        {
            "path": "/graph/summary",
            "pathitem": {
                "get": {
                    "description": "Returns a summary of the graph.",
                    "summary": "Get graph summary"
                }
            }
        },
        {
            "path": "/overlay",
            "pathitem": {
                "post": {
                    "description": "Given a ReasonerAPI graph, add support edges for any nodes linked in result bindings.",
                    "summary": "Overlay results with available connections between each node."
                }
            }
        },
        {
            "path": "/about",
            "pathitem": {
                "get": {
                    "description": "Returns a JSON describing dataset.",
                    "summary": "JSON about dataset"
                }
            }
        },
        {
            "path": "/{source_type}/{target_type}/{curie}",
            "pathitem": {
                "get": {
                    "description": "Returns one hop paths from `source_node_type`  with `curie` to `target_node_type`.",
                    "summary": "Get one hop results from source type to target type. Note: Please GET /predicates to determine what target goes with a source"
                }
            }
        },
        {
            "path": "/{node_type}/{curie}",
            "pathitem": {
                "get": {
                    "description": "Returns `node` matching `curie`.",
                    "summary": "Find `node` by `curie`"
                }
            }
        }
    ],
    "tags": [
        {
            "name": "translator"
        },
        {
            "name": "automat"
        }
    ]
}